```
package main

import (
"encoding/json"
"log"
"net/http"

"github.com/gorilla/mux"
)

type Usuario struct {
ID          string `json:"id,omitempty"`
NomeUsuario string `json:"nome_usuario,omitempty"`
Email       string `json:"email,omitempty"`
Papel       string `json:"papel,omitempty"` // "comprador" ou "vendedor"
Perfil      Perfil `json:"perfil,omitempty"`
Verificado  bool   `json:"verificado,omitempty"` // Apenas para vendedores
}

type Perfil struct {
Nome         string `json:"nome,omitempty"`
Endereco     string `json:"endereco,omitempty"`
InfoContato  string `json:"info_contato,omitempty"`
Preferencias string `json:"preferencias,omitempty"`
}

var usuarios []Usuario

func CriarUsuario(w http.ResponseWriter, req *http.Request) {
var usuario Usuario
_ = json.NewDecoder(req.Body).Decode(&usuario)
usuario.Papel = "comprador" // Definir como comprador por padrão
usuarios = append(usuarios, usuario)
json.NewEncoder(w).Encode(usuario)
}

func CriarVendedor(w http.ResponseWriter, req *http.Request) {
var vendedor Usuario
_ = json.NewDecoder(req.Body).Decode(&vendedor)
vendedor.Papel = "vendedor"
vendedor.Verificado = false // Por padrão, o vendedor não está verificado
usuarios = append(usuarios, vendedor)
json.NewEncoder(w).Encode(vendedor)
}

func AtualizarPerfil(w http.ResponseWriter, req *http.Request) {
params := mux.Vars(req)
var perfilAtualizado Perfil
_ = json.NewDecoder(req.Body).Decode(&perfilAtualizado)
for index, usuario := range usuarios {
if usuario.ID == params["id"] {
usuarios[index].Perfil = perfilAtualizado
json.NewEncoder(w).Encode(usuarios[index])
return
}
}
json.NewEncoder(w).Encode(Usuario{})
}

func VerificarInfoVendedor(w http.ResponseWriter, req *http.Request) {
params := mux.Vars(req)
for index, usuario := range usuarios {
if usuario.ID == params["id"] && usuario.Papel == "vendedor" {
usuarios[index].Verificado = true
json.NewEncoder(w).Encode(usuarios[index])
return
}
}
json.NewEncoder(w).Encode(Usuario{})
}

func main() {
roteador := mux.NewRouter()

// Rota para cadastro de usuários
roteador.HandleFunc("/usuarios", CriarUsuario).Methods("POST")

// Rota para cadastro de vendedores
roteador.HandleFunc("/vendedores", CriarVendedor).Methods("POST")

// Rota para atualizar perfil de usuário
roteador.HandleFunc("/usuarios/{id}/perfil", AtualizarPerfil).Methods("PUT")

// Rota para verificação de informações do vendedor
roteador.HandleFunc("/vendedores/{id}/verificar", VerificarInfoVendedor).Methods("PUT")

log.Fatal(http.ListenAndServe(":8000", roteador))
}
```
